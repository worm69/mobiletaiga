apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.apollographql.android'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'realm-android'
//apply plugin: 'jacoco-android'
apply from: '../jacoco.gradle'
apply from: '../sonar.gradle'
apply plugin: 'com.google.firebase.appdistribution'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    defaultConfig {
        applicationId "pt.dbmg.mobiletaiga"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "0.1.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

    }
//    Split into platform dependent APK
    splits {
        abi {
            def isReleaseBuild = false

            gradle.startParameter.taskNames.find {
                // Enable split for release builds in different build flavors
                // (assemblePaidRelease, assembleFreeRelease, etc.).
                if (it ==~ /:app:assemble.*Release/) {
                    isReleaseBuild = true
                    return true // break
                }

                return false // continue
            }

            // Enables building multiple APKs per ABI.
            enable isReleaseBuild
            reset()
//            include 'mips','mips64', 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' //select ABIs to build APKs for
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true //generate an additional APK that contains all the ABIs
        }
    }

// map for the version code
    project.ext.versionCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]
// Rename with proper versioning
    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) *
                            1000000 +
                            android.defaultConfig.versionCode
        }
    }
    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            it.buildConfigField 'Boolean', 'IS_LOGGER_ENABLED', ReleaseIsLoggerEnabled
            firebaseAppDistribution {
//                releaseNotesFile="/path/to/releasenotes.txt"
                testers = "gomesdanielbm@gmail.com"
            }
            signingConfig signingConfigs.config
        }
        debug {
            //use resConfig("en", "xxhdpi") Including Minimal Resources
            //disable this build id for development build.
            ext.alwaysUpdateBuildId = false
            minifyEnabled false
            it.buildConfigField 'Boolean', 'IS_LOGGER_ENABLED', DebugIsLoggerEnabled
            signingConfig signingConfigs.config
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'TOKEN', WhatAnimeToken
        it.buildConfigField 'String', 'SERVER_DOMAIN', WhatAnimeDomain
        it.buildConfigField 'String', 'ANILISTCALLBACKURL', AnilistCallbackURL
        it.buildConfigField 'String', 'ANILISTAUTHURL', AnilistAuthURL
        it.buildConfigField 'String', 'ANILISTACCESSTOKENURL', AnilistAccessTokenURL
        it.buildConfigField 'String', 'ANILISTCLIENTID', AnilistClientId
        it.buildConfigField 'String', 'ANILISTCLIENTSECRET', AnilistClientSecret

        it.buildConfigField 'String', 'KITSUURL', KitsuURL
        it.buildConfigField 'String', 'KITSUCLIENTID', KitsuClientId
        it.buildConfigField 'String', 'KITSUCLIENTSECRET', KitsuClientSecret


    }
    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries true
        maxProcessCount 4
    }
}
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.google.firebase:firebase-appdistribution-gradle:2.0.1'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    def nav_version = "1.0.0"
    def futures_version = '1.1.0'
    def lifecycle_version = "2.2.0"
    def room_version = "2.2.5"
    def paging_version = "2.1.2"
    def android_support_library = '1.3.0-alpha02'

    // add the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics:17.5.0'
    implementation 'com.google.firebase:firebase-analytics:17.5.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.1'

    //Support library
    def multidex_version = "2.0.1"
    implementation "androidx.multidex:multidex:$multidex_version"

    implementation "androidx.appcompat:appcompat:$android_support_library"
    implementation "androidx.preference:preference:1.1.1"
    implementation "com.google.android.material:material:$android_support_library"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.percentlayout:percentlayout:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0-alpha02'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // use -ktx for Kotlin
    implementation 'com.apollographql.apollo:apollo-runtime:1.2.1'
    implementation 'com.apollographql.apollo:apollo-android-support:1.2.1'
    //uses jetbrains annotations, so you will need to include this as a compile time dependency
    implementation 'org.jetbrains:annotations:20.1.0'
    compileOnly 'org.jetbrains:annotations:20.1.0'
    testCompileOnly 'org.jetbrains:annotations:20.1.0'

    implementation 'io.realm:android-adapters:3.0.0'
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    // use -ktx for Kotlin
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version"

    // use -ktx for Kotlin
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.concurrent:concurrent-futures:$futures_version"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

    //Images
    implementation('com.github.bumptech.glide:glide:4.11.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    //Videos
    implementation('com.devbrackets.android:exomedia:4.3.0') {
        exclude group: 'com.google.android', module: 'support-v7'
    }

    //Utilities
    implementation('com.github.maddog05:MaddogUtilities:1.0.1') {
        exclude group: 'com.android.support', module: 'support-v7'
    }
    implementation 'com.github.GrenderG:Toasty:1.3.0'
    implementation 'com.github.whalemare:sheetmenu:1.3.6'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    // Test helpers

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:2.1.0"
    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.13'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation 'com.nhaarman:mockito-kotlin:1.6.0'
    implementation "androidx.paging:paging-rxjava2-ktx:$paging_version"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.viewpager:viewpager:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'

    implementation project(path: ':anilistclient')
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}
project.afterEvaluate {
    //Gather build type and product flavor names in a list
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) {
        productFlavors.add('')
    }

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            //Define the sourceName and the sourcePath.
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport,
                    dependsOn: "$testTaskName") {

                group = "Reporting"
                description =
                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled true
                    html.enabled true
                }

                //Directory where the compiled class files are
//                classDirectories =
//                        fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
//                                excludes: ['**/R.class',
//                                           '**/BR.class',
//                                           '**/R$*.class',
//                                           '**/*$ViewInjector*.*',
//                                           '**/*$ViewBinder*.*',
//                                           '**/BuildConfig.*',
//                                           'android/**',
//                                           '**/Manifest*.*',
//                                           '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
//                                           '**/*Module.*', // Modules for Dagger.
//                                           '**/*Dagger*.*', // Dagger auto-generated code.
//                                           '**/*MembersInjector*.*', // Dagger auto-generated code.
//                                           '**/*_Provide*Factory*.*',
//                                           '**/*_Factory.*', //Dagger auto-generated code
//                                           '**/*$*$*.*' // Anonymous classes generated by kotlin
//                                ])

//                sourceDirectories = files(["src/main/java",
//                                           "src/$productFlavorName/java",
//                                           "src/$buildTypeName/java"])
//
//                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }
        }
    }
}
apply plugin: 'com.google.gms.google-services'
