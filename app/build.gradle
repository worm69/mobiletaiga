apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.apollographql.android'
apply plugin: 'realm-android'
apply plugin: 'jacoco-android'
apply plugin: 'io.fabric'
apply from: '../jacoco.gradle'
apply from: '../sonar.gradle'

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.26.1'
    }
}

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "pt.dbmg.mobiletaiga"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "0.1.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
//    Split into platform dependent APK
    splits {
        abi {
            def isReleaseBuild = false

            gradle.startParameter.taskNames.find {
                // Enable split for release builds in different build flavors
                // (assemblePaidRelease, assembleFreeRelease, etc.).
                if (it ==~ /:app:assemble.*Release/) {
                    isReleaseBuild = true
                    return true // break
                }

                return false // continue
            }

            // Enables building multiple APKs per ABI.
            enable isReleaseBuild
            reset()
//            include 'mips','mips64', 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64' //select ABIs to build APKs for
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true //generate an additional APK that contains all the ABIs
        }
    }

// map for the version code
    project.ext.versionCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, 'x86': 3, 'x86_64': 4]
// Rename with proper versioning
    android.applicationVariants.all { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            output.versionCodeOverride =
                    project.ext.versionCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) *
                            1000000 +
                            android.defaultConfig.versionCode
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            it.buildConfigField 'Boolean', 'IS_LOGGER_ENABLED', ReleaseIsLoggerEnabled
        }
        debug {
            //use resConfig("en", "xxhdpi") Including Minimal Resources
            //disable this build id for development build.
            ext.alwaysUpdateBuildId = false
            minifyEnabled false
            useProguard false
            it.buildConfigField 'Boolean', 'IS_LOGGER_ENABLED', DebugIsLoggerEnabled
        }
    }
    buildTypes.each {
        it.buildConfigField 'String', 'TOKEN', WhatAnimeToken
        it.buildConfigField 'String', 'SERVER_DOMAIN', WhatAnimeDomain
        it.buildConfigField 'String', 'CALLBACKURL', CallbackURL
        it.buildConfigField 'String', 'AUTHURL', AuthURL
        it.buildConfigField 'String', 'ACCESSTOKENURL', AccessTokenURL
        it.buildConfigField 'String', 'CLIENTID', ClientId
        it.buildConfigField 'String', 'CLIENTSECRET', ClientSecret
        it.buildConfigField 'String', 'AUTH_TOKEN_TEST_ANILIST', AUTH_TOKEN

    }
    sourceSets {
        main.java.srcDirs += 'src/main/java'
    }
    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries true
        maxProcessCount 4
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    def nav_version = "1.0.0-beta02"
    def futures_version = "1.0.0-alpha02"
    def lifecycle_version = "2.0.0"
    def room_version = "2.1.0-alpha04"
    def paging_version = "2.1.0"
    def android_support_library = '1.0.0-beta01'

    //Support library
    implementation "androidx.appcompat:appcompat:$android_support_library"
    implementation "androidx.preference:preference:$android_support_library"
    implementation "com.google.android.material:material:$android_support_library"
    implementation "androidx.cardview:cardview:$android_support_library"
    implementation "androidx.percentlayout:percentlayout:$android_support_library"
    implementation "androidx.recyclerview:recyclerview:$android_support_library"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha02'
    implementation 'com.google.android.material:material:1.1.0-alpha03'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'com.jakewharton.timber:timber:4.6.1'
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-rxjava2:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // use -ktx for Kotlin
    implementation 'com.apollographql.apollo:apollo-runtime:1.0.0-alpha4'
    implementation 'com.apollographql.apollo:apollo-android-support:1.0.0-alpha4'
    implementation 'io.realm:android-adapters:3.0.0'
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    // use -ktx for Kotlin
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version"

    // use -ktx for Kotlin
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.concurrent:concurrent-futures:$futures_version"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
        transitive = true
    }
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

    // use kapt for Kotlin

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"

    // use -ktx for Kotlin

    //Images
    implementation('com.github.bumptech.glide:glide:4.8.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    //Videos
    implementation('com.devbrackets.android:exomedia:4.3.0') {
        exclude group: 'com.google.android', module: 'support-v7'
    }

    //Utilities
    implementation('com.github.maddog05:MaddogUtilities:1.0.1') {
        exclude group: 'com.android.support', module: 'support-v7'
    }
    implementation 'com.github.GrenderG:Toasty:1.3.0'
    implementation 'com.github.whalemare:sheetmenu:1.3.6'
    kapt 'com.github.bumptech.glide:compiler:4.8.0'

    // Test helpers

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation 'com.nhaarman:mockito-kotlin:1.5.0'
    implementation "androidx.paging:paging-rxjava2-ktx:$paging_version"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.viewpager:viewpager:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'

    compile project(path: ':anilistclient')
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}
project.afterEvaluate {
    //Gather build type and product flavor names in a list
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) {
        productFlavors.add('')
    }

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            //Define the sourceName and the sourcePath.
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport,
                    dependsOn: "$testTaskName") {

                group = "Reporting"
                description =
                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled true
                    html.enabled true
                }

                //Directory where the compiled class files are
                classDirectories =
                        fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
                                excludes: ['**/R.class',
                                           '**/BR.class',
                                           '**/R$*.class',
                                           '**/*$ViewInjector*.*',
                                           '**/*$ViewBinder*.*',
                                           '**/BuildConfig.*',
                                           'android/**',
                                           '**/Manifest*.*',
                                           '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                                           '**/*Module.*', // Modules for Dagger.
                                           '**/*Dagger*.*', // Dagger auto-generated code.
                                           '**/*MembersInjector*.*', // Dagger auto-generated code.
                                           '**/*_Provide*Factory*.*',
                                           '**/*_Factory.*', //Dagger auto-generated code
                                           '**/*$*$*.*' // Anonymous classes generated by kotlin
                                ])

                sourceDirectories = files(["src/main/java",
                                           "src/$productFlavorName/java",
                                           "src/$buildTypeName/java"])

                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }
        }
    }
}
